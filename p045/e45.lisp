;; Euler 45
;;
;; Triangle, pentagonal, and hexagonal numbers are generated by the
;; following formulae:
;;
;; Triangle      Tn=n(n+1)/2     1, 3, 6, 10, 15, ...
;; Pentagonal    Pn=n(3n-1)/2    1, 5, 12, 22, 35, ...
;; Hexagonal     Hn=n(2n-1)      1, 6, 15, 28, 45, ...
;; It can be verified that T285 = P165 = H143 = 40755.
;;
;; Find the next triangle number that is also pentagonal and hexagonal.

(defun triangle (n)
  (/ (* n (+ n 1)) 2))

(defun hexagonal (n)
  (* n (- (* 2 n)
          1)))

(defun hexagonalp (n)
  (let ((sr (sqrt (+ (* 8 n) 1))))
    (and (zerop (mod sr 1))
         (= 3 (mod sr 4)))))

(defun trianglep (n)
  (zerop (mod (/ (- (sqrt (+ (* 8 n) 1)) 1) 2)
              1)))

(defun pentagonal (n)
  (/ (* n (- (* 3 n) 1))
     2))

(defun pentagonalp (n)
  ;; I kludged this to deal with inaccurate sqrt results on SBCL.  We
  ;; take the integer sqrt of x, and then do an extra step to verify
  ;; that it actually is the sqrt.
  (let* ((x (+ (* 24 n) 1))
         (sr (isqrt x)))
    (and (zerop (mod sr
                     1))
         (= (* sr sr) x)
         (= 5 (mod sr
                   6)))))

(defun e45 (&optional (n 144))
  (let ((h (hexagonal n)))
    (if (pentagonalp h)
        h
        (e45 (1+ n)))))
